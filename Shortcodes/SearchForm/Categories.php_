<?php

namespace CCOM_CORE\Shortcodes\SearchForm;
use CCOM_CORE\Classes\Helpers;
use CCOM_CORE\Classes\Optimizer;
class Categories extends Select {
    static  $shortcode = "sf_category";
    private static $base = "";

    static function get_values(){

        $category   = self::get_atts('category','category');

        $terms      = get_terms( array(
            'taxonomy'      => $category,
            'hide_empty'    => true,
            'parent'        => 0,
        ) );

        $options = array(
           array(
            'value'                 => '',
            'value_friendly'        => __('Todas','ccom'),
            'data'                  => array(
                'data-default'      => 1,
            )
           )
        );

        foreach($terms AS $term){
           $options[] = array(
               'value'          => $term->slug,
               'value_friendly' => $term->name
           );
        }

        $options = array_map(array(__CLASS__,'set_option_data'),$options);
        $options =  array_map(array(__CLASS__,'set_selected'),$options);
        return $options;
    }

    private static function set_option_data($option){

        $category   = self::get_atts('category','category');
        $base = self::$base;
        $slug = isset($option['value']) && !empty($option['value']) ? "/".$option['value']."/" : null;
        $option['data'] = isset($option['data']) ? $option['data'] : array();
        $option['data']['data-url'] = "/$base{$slug}";
        return $option;
    }

    private static function set_selected(&$option): array{
        $category = get_query_var('ccom_category');
        $category = $category;
        
        if($option['value'] == $category){
            $option['selected'] = true;
        }
        return $option;
    }

    static function set_default_atts(){
        $atts = self::get_atts();
        parent::set_default_atts();
        self::$attributes_defaults = array_merge(static::$attributes_defaults,array(
            'type'      => 'selector',
            'values'    => array(),
            'multiple'  => false,
            'name'      => 'category',
            'category'  => '',
            'post_type' => '',
        ));
    }

    private static function set_data(){
        $post_type      = self::get_atts('post_type');
        $page_id        = Helpers::get_option("{$post_type}_page_list");
        $page           = get_page($page_id);
        self::$base     = $page->post_name;
    }



    private static function get_associate_grid_post_type(){

        global $post;
        $regex                  = get_shortcode_regex(array('searchform'));
        $sf_category_regex      = get_shortcode_regex(array('sf_category'));
        $search_grid            = null;
        $vc_id                  = self::get_atts('vc_id');
        $vc_grid                = null;
        $post_type              = null;
        // $taxonomy   = null;
        if ( $post &&  preg_match_all( "/$regex/" , $post->post_content, $matches, PREG_SET_ORDER) ) {
  
          foreach($matches AS $match => $short){
              if($form_atts    = shortcode_parse_atts( $short[3] )){
                  $content  = $short[5];
                  if ( preg_match( "/$sf_category_regex/" , $content, $shortcode) ) {
  
                    if($atts    = shortcode_parse_atts( $shortcode[3] )){
                      
                      $attsString         = Optimizer::string_atts($atts);
                      $design_css_class   = Optimizer::get_design_css_class($attsString);
                      $exist              = ($vc_id == $design_css_class) ? true : false; 
                    }
                    if($exist){
                      $vc_grid  = $form_atts['vc_grid'] ? : false;
                      break;
                    } 
                  }
              }
            }  
        }
  
        $search_grid_regex = get_shortcode_regex(array('ccom_search_grid'));
  
  
  
        if ( $post && isset($vc_grid) &&  preg_match_all( "/$search_grid_regex/" , $post->post_content, $matches, PREG_SET_ORDER) ) {
  
          foreach($matches AS $match => $short){
              if($atts    = shortcode_parse_atts( $short[3] )){
                  $post_type = isset($atts['post_type'])  ? $atts['post_type']  : null;
                  $_gid      = isset($atts['_gid'])       ? $atts['_gid']       : null;
                  if($_gid == $vc_grid) break;
              }
            }  
        }
        $post_types = explode(',',$post_type);
        return (count($post_types) > 1) ? $post_types : $post_types[0];
  
      }

    static function buildAtts($atts = array(), $content = null){
        self::set_data();
        static::set_default_atts();
        $default = static::$attributes_defaults;
        $_atts   = shortcode_atts($default, $atts);
        self::set_atts($_atts);
    }

    static function output($atts, $content = null){
        $post_type    = self::get_associate_grid_post_type();

        self::set_att('category',"{$post_type}_category");
        self::set_att('post_type',$post_type);
        $category   = self::get_atts('category','category');
        $values = static::get_values();
        self::set_att('values',$values);

        self::set_att('name',$category);
        return parent::output($atts,$content);
    }

}