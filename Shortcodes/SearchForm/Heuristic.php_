<?php
namespace CCOM_CORE\Shortcodes\SearchForm;
use CCOM_CORE\Classes\Optimizer;
final class Heuristic extends Field {

    static $shortcode = "sf_heuristic";
    static $component_namespace = "CCOM_CORE\\Components\\SearchForm";


    static function get_values(){
      $post_type      = self::get_atts('post_type');
      $heuristic_data = get_option('heuristic_data',array());
      return isset($heuristic_data[$post_type]) ? $heuristic_data[$post_type] : array();
    }

    static function set_default_atts(){
      $atts = self::get_atts();
      parent::set_default_atts();
      self::$attributes_defaults = array_merge(static::$attributes_defaults,array(
          'values'      => array(),
          'placeholder' => '',
          'name'        => 'heuristic',
          'post_type'   => null,
      ));
    }


    private static function get_associate_grid_post_type(){

      global $post;
      $regex                  = get_shortcode_regex(array('searchform'));
      $heuristic_grid         = get_shortcode_regex(array('sf_heuristic'));
      $search_grid            = null;
      $vc_id                  = self::get_atts('vc_id');
      $vc_grid                = null;
      $post_type              = null;
      // $taxonomy   = null;
      if ( $post &&  preg_match_all( "/$regex/" , $post->post_content, $matches, PREG_SET_ORDER) ) {

        foreach($matches AS $match => $short){
            if($form_atts    = shortcode_parse_atts( $short[3] )){
                $content  = $short[5];
                if ( preg_match( "/$heuristic_grid/" , $content, $shortcode) ) {

                  if($atts    = shortcode_parse_atts( $shortcode[3] )){
                    
                    $attsString         = Optimizer::string_atts($atts);
                    $design_css_class   = Optimizer::get_design_css_class($attsString);
                    $exist              = ($vc_id == $design_css_class) ? true : false; 
                  }
                  if($exist){
                    $vc_grid  = $form_atts['vc_grid'] ? : false;
                    break;
                  } 
                }
            }
          }  
      }

      $search_grid_regex = get_shortcode_regex(array('ccom_search_grid'));



      if ( $post && isset($vc_grid) &&  preg_match_all( "/$search_grid_regex/" , $post->post_content, $matches, PREG_SET_ORDER) ) {

        foreach($matches AS $match => $short){
            if($atts    = shortcode_parse_atts( $short[3] )){
                $post_type = isset($atts['post_type'])  ? $atts['post_type']  : null;
                $_gid      = isset($atts['_gid'])       ? $atts['_gid']       : null;
                if($_gid == $vc_grid) break;
            }
          }  
      }
      $post_types = explode(',',$post_type);
      return (count($post_types) > 1) ? $post_types : $post_types[0];

    }



    static function generate_css(){

    }
    public static function general_styles(){
      return "

      #heuristic-container {
        width: 100%;
      }



      #heuristic {
        width: 100%;
        padding: .3rem;
        border: 1px solid #f3f6f9;
      }
      
      .ui-menu.ui-autocomplete {
        padding: .5rem .2rem;
        border: 1px solid #f3f6f8;
        box-sizing: border-box;
        max-width: 100% !important;
        width: 100% !important;
        max-height: 300px;
        overflow-y: scroll;
        overflow-X: hidden;
      }
      .ui-menu li {
        list-style: none;
        cursor: pointer;
        margin-bottom: .2rem;
      }

      .ui-menu img{
        width:30px;
        height:30px;
      }

      .ccom_heuristic_result.ui-menu-item div {
        display: flex;
        align-items: center;
      }

      .ccom_heuristic_result.ui-menu-item div img {
        flex: 0 0 10%;
        width: 10%;
        height: 100%;
    }

      .ui-menu li span {
        flex: 0 0 90%;
        width: 90%;
        margin-left: 10px;
        line-height: 14px;
      }
      
      .icon-heurstic {
        position: absolute;
        right: 5px;
        background-color: transparent;
        border: 0;
        top: 0;
        bottom: 0;
        line-height: 40px;
        text-align: center;
        opacity: .3;
      }
      .input--heuristic--container{
        position: relative;
      }
      ";
      
    }

    static function BuildAtts($atts = array(), $content = null ){
      parent::BuildAtts($atts,$content);
      $post_type    = self::get_associate_grid_post_type();
      self::set_att('post_type',$post_type);
    }


    static function output($atts, $content){
      $options  = self::get_values();
      add_action('wp_footer',function()use($options){
        wp_localize_script( 'ccom_grid', 'heuristic_data',$options);

      });

      
      wp_enqueue_script( 'jquery-ui-autocomplete' );
      
      $placeholder  = self::get_atts('placeholder');
      $vc_id        = self::get_atts('vc_id');

      $content = "<div id='heuristic-container' class='$vc_id input--heuristic--container'>
          <div class='form-group caja-input input--heuristic--container'>
          <input type='text' id='heuristic' class='form-control no-filter' name='heuristic' data-name='heuristic' placeholder='{$placeholder}'>
          <span class='icon-heurstic'> <i class='ccom ccom-icon-buscar'></i></span>
          </div>
          <input type='hidden' id='heuristic_value'  name='heuristic' data-name='heuristic'>
        </div>";
      return parent::output($atts,$content);
    }

    // static function script_on_footer(){
    //     wp_localize_script('ccom_grid','prueba',$options );

    // }
    

    // static function localize_script(){
    //   // self::buildAtts();
    //   // add_action( 'wp_enqueue_scripts',function() use ($options){
    //   //   wp_localize_script('ccom_grid','prueba',$options );
    //   // },100);
    // }
}